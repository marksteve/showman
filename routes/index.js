// Generated by CoffeeScript 1.3.3
var async, config, fs, getSlides, parser, path, renderNote, renderSlide, renderer, rs;

config = require("../config");

fs = require("fs");

path = require("path");

async = require("async");

rs = require("robotskirt");

renderer = new rs.HtmlRenderer();

parser = new rs.Markdown(renderer);

getSlides = function(cb) {
  return fs.readdir(config.slidesPath, function(err, filenames) {
    filenames = filenames.filter(function(filename) {
      return filename.indexOf('-notes') < 0;
    });
    return cb(err, filenames);
  });
};

renderSlide = function(file, cb) {
  return fs.readFile(file, function(err, data) {
    return cb(err, parser.render(data));
  });
};

exports.slides = function(req, res) {
  return getSlides(function(err, filenames) {
    var files;
    files = filenames.map(function(filename) {
      return path.join(config.slidesPath, filename);
    });
    async.map(files, renderSlide, function(err, slides) {
      return res.render("slides", {
        slides: slides
      });
    });
  });
};

renderNote = function(file, cb) {
  return fs.readFile(file, function(err, data) {
    if (err) {
      cb(null, 'No notes');
    } else {
      cb(err, data);
    }
  });
};

exports.rc = function(req, res) {
  return getSlides(function(err, filenames) {
    var files;
    files = filenames.map(function(filename) {
      var ext;
      ext = path.extname(filename);
      return path.join(config.slidesPath, path.basename(filename, ext) + '-notes' + ext);
    });
    return async.map(files, renderNote, function(err, notes) {
      return res.render("rc", {
        notes: notes
      });
    });
  });
};
